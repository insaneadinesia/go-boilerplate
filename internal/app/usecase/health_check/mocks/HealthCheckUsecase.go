// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	health_check "github.com/insaneadinesia/go-boilerplate/internal/app/usecase/health_check"
	mock "github.com/stretchr/testify/mock"
)

// HealthCheckUsecase is an autogenerated mock type for the HealthCheckUsecase type
type HealthCheckUsecase struct {
	mock.Mock
}

// HealthCheck provides a mock function with given fields: ctx
func (_m *HealthCheckUsecase) HealthCheck(ctx context.Context) (health_check.StatusCheck, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for HealthCheck")
	}

	var r0 health_check.StatusCheck
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (health_check.StatusCheck, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) health_check.StatusCheck); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(health_check.StatusCheck)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHealthCheckUsecase creates a new instance of HealthCheckUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHealthCheckUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *HealthCheckUsecase {
	mock := &HealthCheckUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
